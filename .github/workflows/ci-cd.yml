name: CI/CD for Etoubib Api

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

env:
  DOCKER_IMAGE: etoubib-api
  DOCKER_IMAGE_BLUE: etoubib-api-blue
  DOCKER_IMAGE_GREEN: etoubib-api-green

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run unit tests (log for now)
        run: |
          echo "Running unit tests..."
          # we will add our test here in future
          # npm run test

  set-environment: 
      runs-on: ubuntu-latest 
      needs: test
      outputs: 
        current_env: ${{ steps.set_env.outputs.current_env }}
      steps:
        - name: Check if prod
          if: endsWith(github.ref, '/main') #if the triggering branch is 'main'
          run: |
            echo "ENVIRONMENT_NAME=production" >> $GITHUB_ENV
        - name: Check if staging
          if: endsWith(github.ref, '/staging') #if the triggering branch is 'dev'
          run: |
            echo "ENVIRONMENT_NAME=staging" >> $GITHUB_ENV
        - name: Set output
          id: set_env
          run: |
            echo "current_env=${{ env.ENVIRONMENT_NAME }}" >> $GITHUB_OUTPUT
  
  build_for_migration:
    strategy:
      matrix:
        os: ${{ fromJSON(github.ref == 'refs/heads/main' && '["self-hosted", "production"]' || '["self-hosted", "staging"]') }}
    runs-on: ${{ matrix.os }}
    needs: set-environment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build Docker image for migration
        run: |
          docker build -t etoubib-migration-build -f migration.dockerfile .

  migration:
    strategy:
      matrix:
        os: ${{ fromJSON(github.ref == 'refs/heads/main' && '["self-hosted", "production"]' || '["self-hosted", "staging"]') }}
    runs-on: ${{ matrix.os }}
    needs: [build_for_migration, set-environment]
    environment:
      name: ${{ needs.set-environment.outputs.current_env }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run migration inside Docker container
        run: |
          docker run -e TYPEORM_URL=${{ secrets.TYPEORM_URL }} etoubib-migration-build

  build_app:
    strategy:
      matrix:
        os: ${{ fromJSON(github.ref == 'refs/heads/main' && '["self-hosted", "production"]' || '["self-hosted", "staging"]') }}
    runs-on: ${{ matrix.os }}
    needs: [migration, set-environment]
    environment: 
      name: ${{ needs.set-environment.outputs.current_env }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build Docker image for app
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }} .
      
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        run: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}
  
      - name: Tag Docker image
        run: |
          docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ secrets.ECR_REPOSITORY }}:$GITHUB_SHA
    
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:$GITHUB_SHA

  deploy:
    strategy:
      matrix:
        os: ${{ fromJSON(github.ref == 'refs/heads/main' && '["self-hosted", "production"]' || '["self-hosted", "staging"]') }}
    runs-on: ${{ matrix.os }}
    needs: [build_app, set-environment]
    environment:
      name: ${{ needs.set-environment.outputs.current_env }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Pulling latest Docker image from ECR
        run: |
          docker pull ${{ secrets.ECR_REPOSITORY }}:$GITHUB_SHA

      - name: Check if Blue container exists
        id: check_blue
        run: |
          if docker ps -a --format '{{.Names}}' | grep -q "^${{ env.DOCKER_IMAGE_BLUE }}$"; then
            echo "Blue container exists"
            echo "BLUE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "No Blue container found (first deployment)"
            echo "BLUE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Deploy Green container (new version)
        run: |
          docker run -e TYPEORM_URL=${{ secrets.TYPEORM_URL }} -d -p 3001:3000 --name ${{ env.DOCKER_IMAGE_GREEN }} ${{ secrets.ECR_REPOSITORY }}:$GITHUB_SHA

      - name: Health Check on Green Container
        run: |
          for i in {1..10}; do
            if curl --fail http://localhost:3001/api/health-check; then
              echo "Green container is healthy!"
              exit 0
            fi
            echo "Waiting for Green container to be ready..."
            sleep 5
          done
          echo "Green container failed health check"
          exit 1

      - name: Switch Traffic to Green (Blue-Green Swap)
        run: |
          if [ "$BLUE_EXISTS" = "true" ]; then
            echo "Stopping and renaming Blue..."
            docker stop ${{ env.DOCKER_IMAGE_BLUE }} --time=30 || true
            docker rename ${{ env.DOCKER_IMAGE_GREEN }} ${{ env.DOCKER_IMAGE_BLUE }}
          else
            echo "First deployment, no Blue container to swap."
            docker rename ${{ env.DOCKER_IMAGE_GREEN }} ${{ env.DOCKER_IMAGE_BLUE }}
          fi

      - name: Clean up Docker images
        run: |
          docker system prune -f --volumes
        